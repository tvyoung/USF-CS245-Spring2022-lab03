/*
 * This Java source file was (initially) generated by the Gradle 'init' task.
 */
//@author Vicki Young
//@date 2022.02.17
//CS245 Lab03 Sorting

//commented out since line causes error
//package lab03;

import java.util.*;
import java.lang.*;

public class Lab03{

    //takes an array size as a parameter and generates an unsorted array using Math.random()
    //generated array will contain integers between 0 and 100
    public static int[] arrayGenerator(int datasetSize){
        int[] newArray = new int[datasetSize];
        for (int i = 0; i < datasetSize; i++) {
            int randInt = (int) (Math.random() * 101);
            newArray[i] = randInt;
        }
        return newArray;
    }

    //insertion sort = O(n^2)
    public static void algoName1Sort(int[] dataset){
        for (int i = 1; i < dataset.length; i++) {
            int temp = dataset[i];
            int j = i - 1;
            while (j >= 0 && dataset[j] > temp) {
                dataset[j + 1] = dataset[j];
                --j;
            }
            dataset[j+1] = temp;
        }
    }

    //merge sort = O(n log n)
    public static void algoName2Sort(int[] dataset) {
        if (dataset.length > 1) {
            int[] left = getLeft(dataset);
            int[] right = getRight(dataset);    

            algoName2Sort(left);
            algoName2Sort(right); 

            merge(dataset, left, right);
        }
    }

    //part of algoName2Sort merge sort; returns left half of given array
    private static int[] getLeft(int[] arr) {
        int size = arr.length / 2;
        int[] left = new int[size];
        for (int i = 0; i < size; i++) {
            left[i] = arr[i];
        }
        return left;
    }

    //part of algoName2Sort merge sort; returns right half of given array
    private static int[] getRight(int[] arr) {
        //leftHalf is the size of the left half of the given array; size is the true size of the right half of the array
        //ex. if arr.length = 5, then leftHalf = 2, and the right half of the array will be size = 3 
        int leftHalf = arr.length / 2;
        int size = arr.length - leftHalf;
        int[] right = new int[size];
        for (int i = 0; i < size; i++) {
            right[i] = arr[i + leftHalf];
        }
        return right;
    }

    //part of algoName2Sort merge sort; merges all the sorted arrays together
    private static void merge(int[] arr, int[] left, int[] right) {
        //i = left; j = right; k = arr;
        int i = 0, j = 0, k = 0;
        //merge sort left and right arrays into target array
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
            }
        }
        //merge remaining left array elements into target array
        while (i < left.length) {
            arr[k++] = left[i++];
        }
        //merge remaining right array elements into target array
        while (j < right.length) {
            arr[k++] = right[j++];
        }
    }

    //compares running time of algorithms by sorting given dataset (# of times = iterations)
    public static Performance algorithmsComparator(int[] dataset, int iterations){
        Performance result = new Performance(dataset.length, iterations);

        //measure running time of algoName1Sort insertion sort
        long start = System.nanoTime();
        for (int i = 0; i < iterations; i++) {
            //insertion sort copy of dataset
            algoName1Sort(dataset.clone());
        }
        long finish = System.nanoTime();
        //save measured time of algoName1Sort insertion sort
        result.setFirstAlgoStartTime(start / 1000000);
        result.setFirstAlgoEndTime(finish / 1000000);

        //measure running time of algoName2Sort merge sort
        start = System.nanoTime();
        for (int i = 0; i < iterations; i++) {
            //merge sort copy of dataset
            algoName2Sort(dataset.clone());
        }
        finish = System.nanoTime();
        //save measured time of algoName2Sort merge sort
        result.setSecondAlgoStartTime(start / 1000000);
        result.setSecondAlgoEndTime(finish / 1000000);

        return result;
    }

    public static String checkPerformanceForMultipleArraySizes(int[] arraySizes, int iterations) throws IllegalArgumentException{
        StringBuilder response = new StringBuilder();
        for (int i = 0; i < arraySizes.length; i++){
            //tested array sizes cannot be less than 1; throws IllegalArgumentException if so
            if (arraySizes[i] < 1) {
                throw new IllegalArgumentException("Array length cannot be less than 1");
            }
            //generate array of given size with random int values
            int[] tester = arrayGenerator(arraySizes[i]);
            //tests given array size by running it (# of times = iterations)
            Performance result = algorithmsComparator(tester, iterations);
            response.append(result.toString());
            response.append(System.getProperty("line.separator"));
        }
        return response.toString();
    }

    public static void main(String[] args) {
        //FOR TESTING
        /*int[] array1 = arrayGenerator(10);
        System.out.println("unsorted array1:");
        for (int i : array1) {
            System.out.print(i + " ");
        }
        int[] array2 = array1.clone();
           System.out.println("unsorted array2 clone of array1:");
        for (int i : array2) {
            System.out.print(i + " ");
        }*/     

        //FOR TESTING
        /*algoName1Sort(array1);
        System.out.println("\narray sorted through insertion sort:");
        for (int i : array1) {
            System.out.print(i + " ");
        }*/

        //FOR TESTING
        /*algoName2Sort(array1);
        System.out.println("\narray sorted through merge sort:");
        for (int i : array1) {
            System.out.print(i + " ");
        }*/

        //FOR TESTING
        //System.out.println("\n" + algorithmsComparator(array1, 1));

        int[] arraySizes = {1000, 10000, 100000, 1000000};
        System.out.println(checkPerformanceForMultipleArraySizes(arraySizes, 2));
    }
}
